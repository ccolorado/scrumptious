#!/usr/bin/env python

import argparse
import ConfigParser
import datetime
import io
import jinja2
import jira.client
import os
import os.path


CONF = None
JIRA_CTX = None

CONFIG_FILES = ['/etc/scrumptiousrc', os.path.join(os.path.expanduser('~'), '.scrumptiousrc')]
DEFAULTS = """
[jira]
server = https://localhost
user =
password =


[core]
template_filename =
minute_directory = ~/.scrumptious/minutes
minute_epoch =
"""


def get_opened_issues(days_ago=14):
    since = datetime.datetime.now() - datetime.timedelta(days=days_ago)
    return JIRA_CTX.search_issues("assignee='%s' AND reporter = '%s' AND created >= '%s'" % (CONF.user, CONF.user, since.strftime('%Y/%m/%d')))


def get_closed_issues(days_ago=14):
    since = datetime.datetime.now() - datetime.timedelta(days=days_ago)
    qs = "assignee='%s' AND created >= '%s' AND status IN ('Closed')" % (CONF.user, since.strftime('%Y/%m/%d'))
    return JIRA_CTX.search_issues(qs)


def get_my_active_issues(days_ago=14):
    qs = "assignee='%s' AND status NOT IN ( 'Closed', 'Withdrawn') " % (CONF.user)
    return JIRA_CTX.search_issues(qs)


def get_my_recent_issues(days_ago=14):
    qs = "assignee='%s' AND status NOT IN ( 'Closed', 'Withdrawn') " % (CONF.user)
    return JIRA_CTX.search_issues(qs)


def create_template():
    return jinja2.Template('''
# All stories
{% for story in my_active_issues -%}
 * {{story.key}}  {{story.fields.status}} - {{story.fields.summary}}
{% endfor %}

''').render(my_active_issues=get_my_active_issues())


def get_editor():
    return os.environ.get('JIRA_EDITOR') or os.environ.get('EDITOR') or 'vi'


def parse_args():

    conf_parser = argparse.ArgumentParser(add_help=False)
    conf_parser.add_argument('--conf-file', '-c', help='Specify the config file')

    args, remaining = conf_parser.parse_known_args()
    config = ConfigParser.RawConfigParser()

    config.readfp(io.BytesIO(DEFAULTS))
    if args.conf_file:
        config.read([args.conf_file])
    else:
        create_conf()
        config.read(CONFIG_FILES)

    opts = dict(config.items('jira'))
    opts.update(config.items('core'))
    parser = argparse.ArgumentParser(parents=[conf_parser])
    parser.set_defaults(**opts)

    parser.add_argument('--server', '-s', help='jira server')
    parser.add_argument('--user', '-u', help='jira user')
    parser.add_argument('--password', '-p', help='jira password')
    parser.add_argument('day_offset', help='day offset', type=int, default=0, nargs='?')

    args = parser.parse_args()

    args.server = args.server or os.environ.get('JIRA_SERVER') or opts['server']
    args.user = args.user or os.environ.get('JIRA_USER')
    args.password = args.password or os.environ.get('JIRA_PASSWORD')

    if not args.user:
        parser.error('Missing required argument: user')

    if not args.password:
        parser.error('Missing required argument: password')

    return args


def create_conf():
    user_config = CONFIG_FILES[-1]
    if not os.path.exists(user_config):
        with open(user_config, 'w') as f:
            f.write(DEFAULTS)


def minute_path_from_datetime(date=datetime.datetime.today()):
    '''
    Returns the path where the current minute will be stored: as follows
    ~/.scrumptious/minutes/2015-04-29_minute.md
    '''
    datestr = date.strftime('%Y-%m-%d')
    return os.path.expanduser(os.path.join(CONF.minute_directory, '%s_%s' % (datestr, 'minute.md')))


def main():
    global CONF
    global JIRA_CTX

    CONF = parse_args()
    print minute_path_from_datetime()

    if False:
        JIRA_CTX = jira.client.JIRA(basic_auth=(CONF.user, CONF.password), options={'server': CONF.server})
        template = create_template()
        print(template)


if __name__ == '__main__':
    main()
