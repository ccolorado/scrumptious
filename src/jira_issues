#!/usr/bin/python2

import argparse
import ConfigParser
import datetime
import io
import jinja2
import jira.client
import os
import os.path
import subprocess
import tempfile
import time
import pprint


CONF = None
JIRA_CTX = None


DEFAULTS = """
[jira]
server = https://localhost
user =
password =
"""

def get_opened_issues(days_ago=14):
    since = datetime.datetime.now() - datetime.timedelta(days=days_ago)
    return JIRA_CTX.search_issues("assignee='%s' AND reporter = '%s' AND created >= '%s'" % (CONF.user, CONF.user, since.strftime('%Y/%m/%d')))


def get_closed_issues(days_ago=14):
    since = datetime.datetime.now() - datetime.timedelta(days=days_ago)
    qs = "assignee='%s' AND created >= '%s' AND status IN ('Closed')" % (CONF.user, since.strftime('%Y/%m/%d'))
    return JIRA_CTX.search_issues(qs)

def get_my_active_issues():
    qs = "assignee='%s' AND status NOT IN ( 'Closed', 'Withdrawn') " % (CONF.user)
    return JIRA_CTX.search_issues(qs)

def get_my_active_sprint_issues():
    qs = "assignee='%s' AND status NOT IN ( 'Closed', 'Withdrawn') and sprint in openSprints()" % (CONF.user)
    return JIRA_CTX.search_issues(qs)

def get_my_recent_issues(days_ago=14):
    since = datetime.datetime.now() - datetime.timedelta(days=days_ago)
    #qs = "assignee='%s' AND status IN ( 'Open', 'In Progress', 'Resolved') " % (CONF.user)
    qs = "assignee='%s' AND status NOT IN ( 'Closed', 'Withdrawn') " % (CONF.user)
    return JIRA_CTX.search_issues(qs)


def create_template():

    active_sprint = jinja2.Template('''
# Active Sprint

{% for story in my_active_sprint_issues -%}
 * {{story.key}}  {{story.fields.status}} - {{story.fields.summary}}

{% endfor %}
''').render(my_active_sprint_issues=get_my_active_sprint_issues())

    all_issues = jinja2.Template('''
# All stories

{% for story in my_active_issues -%}
 * {{story.key}} <{{story.fields.priority}}> {{story.fields.status}} - {{story.fields.summary}}
{% endfor %}

''').render(my_active_issues=get_my_active_issues())
    return  active_sprint + all_issues


def get_editor():
    return os.environ.get('JIRA_EDITOR') or os.environ.get('EDITOR') or 'vi'


def parse_args():

  conf_parser = argparse.ArgumentParser(add_help=False)
  conf_parser.add_argument('--conf-file', '-c', help='Specify the config file')

  args, remaining = conf_parser.parse_known_args()
  config = ConfigParser.RawConfigParser()

  config.readfp(io.BytesIO(DEFAULTS))
  if args.conf_file:
      config.read([args.conf_file])
  else:
      config.read(['/etc/jira.conf', os.path.expanduser('~/.jira.conf'), 'jira.conf'])

  opts = dict(config.items('jira'))
  parser = argparse.ArgumentParser(parents=[conf_parser])
  parser.set_defaults(**opts)

  parser.add_argument('--server', '-s', help='jira server')
  parser.add_argument('--user', '-u', help='jira user')
  parser.add_argument('--password', '-p', help='jira password')
  args = parser.parse_args()

  args.server = args.server or os.environ.get('JIRA_SERVER') or opts['server']
  args.user = args.user or os.environ.get('JIRA_USER')
  args.password = args.password or os.environ.get('JIRA_PASSWORD')

  if not args.user:
      parser.error('Missing required argument: user')

  if not args.password:
      parser.error('Missing required argument: password')

  return args


def main():
    global CONF
    global JIRA_CTX

CONF = parse_args()
out_filename = time.strftime("/tmp/jira_status.md")
JIRA_CTX = jira.client.JIRA(basic_auth=(CONF.user, CONF.password), options={'server': CONF.server})
template = create_template()
#f = open( out_filename, 'r+')
#f.write(template)
print( template )


if __name__ == '__main__':
    main()
